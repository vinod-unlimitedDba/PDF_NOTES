
Brief Summary of a Raw 10046 Extended Trace File’s Contents 

Oracle’s 10046 extended trace files contain a large number of keywords that help determine what 
operations a session is performing, and the delays present while performing those operations. The 
following are many of the useful keywords found in 10046 extended trace files: 

len: Number of characters in the SQL statement. 

dep: Indicates the application/trigger depth at which the SQL statement was 
executed. dep=0 indicates that it was executed by the client application. dep=1
indicates that the SQL statement was executed by a trigger, the Oracle 
optimizer, or a space management call. dep=2 usually indicates that the SQL 
statement was called from a trigger but also may appear in situations where a 
hard parse is required during space management activities. dep=3 usually 
indicates that the SQL statement was called from a trigger that was called from 
a trigger. (Hard parses during space management activities or hard parses of 
SQL statements in triggers could also generate dep=3 calls.) 

oct: Identifies the Oracle command type, which is related to the 
V$SESSION.COMMAND column and the V$SQL.COMMAND_TYPE column. Common 
command type values include: 1 = create table, 2 = insert, 3 = select, 6 = update, 
7 = delete, and 9 = create index. See the “Command Column of V$SESSION and 
Corresponding Commands” table in the Oracle Reference documentation 
(Table 8-2 in the Oracle Database Reference 11g Release 2 book) for a complete 
list of command types. 

hv: Identifies the SQL hash value of the SQL statement in the various SQLrelated views (V$SQL, V$SQL_PLAN, V$SQL_PLAN_STATISTICS, V$SQL_OPTIMIZER_ENV, 
V$SQL_SHARED_CURSOR, and so forth). Use with the SQL address found in the ad=
statistic.

ad: Identifies the SQL address of the SQL statement in the various SQL-related 
views. Use with the SQL hash value found in the hv= statistic or the sqlid.

sqlid: Output in Oracle 11.1 and above trace files that identifies the SQL_ID
found in various views in Oracle 10.1 and above. 

tim: Timestamp measured in 1/1,000,000 of a second (some Unix platforms 
cheat through a bit-shifting function, where the divisor is actually 220, or 
1,048,576). The tim statistic may be used to track the progress in the 10046 trace 
file by taking the delta value of the most recent tim, subtracting the first tim, 
and dividing the result by 1,000,000 to arrive at the number of seconds into the 
trace file. Some platforms, such as Oracle 10.2 on Windows, use a 32-bit value 
(even on 64-bit Windows) for the tim statistic, which causes the statistic to wrap 
around zero roughly once every 71 minutes and 35 seconds. 

c: CPU time. The amount of CPU resources required at that point in the 
execution. On 8.1.7.4 and earlier releases, divide by 100 to obtain the number of 
seconds. For releases after 8.1.7.4, divide by 1,000,000 to obtain the number 
of seconds.

e: Elapsed time. The number of seconds as measured by a high-precision clock 
at that point in the execution. This may be significantly different from CPU 
seconds. On 8.1.7.4 and earlier releases, divide by 100 to obtain the number of 
seconds. For releases after 8.1.7.4, divide by 1,000,000 to obtain the number of 
seconds. 
p: Physical blocks read from disk, which may be read one block at a time or as 
part of a multiblock read. 
cr: Consistent reads of blocks, possibly requiring the application of undo blocks 
so that a block may be rolled back to a specific SCN number (the specific SCN is 
partially based on the isolation level set for the session). The cr statistic in a 
trace file relates to the consistent gets statistic in V$SYSSTAT and V$SESSTAT. 
cu: Current mode reads of blocks, which contain committed and uncommitted 
data. Blocks of this type are often required as block contents are modified 
through inserts, updates, and deletes. The cu statistic in a trace file relates to the 
db block gets statistic in V$SYSSTAT and V$SESSTAT. 
mis: Number of library cache misses at that stage of execution for the SQL 
statement. When a 10046 trace is first enabled for a session, previously hardparsed SQL statements may need to be reparsed on the next access, which may 
then provide misleading information about the frequency of hard parses within 
the session. 
r: Number of rows returned by the call. 
og: Optimizer goal—1 = ALL_ROWS, 2 = FIRST_ROWS (and FIRST_ROWS_n), 3 = RULE, 4
= CHOOSE. 
XCTEND rlbk=0: Indicates that the client issued a COMMIT, and if this is followed 
by rd_only=1, it indicates that no information changed in the database as a 
result of the COMMIT. rlbk=1 indicates that the session performed a ROLLBACK, 
rather than a COMMIT. 
ela: Elapsed time in 1/100 of a second for releases 8.1.7.4 and earlier, and in 
1/1,000,000 of a second for releases after 8.1.7.4. 
p1: The meaning of this statistic depends on the wait event; see 
V$EVENT_NAME.PARAMETER1. On Oracle 10.1 and above, the actual meaning of the 
p1 parameter from V$EVENT_NAME.PARAMETER1 appears in the trace file, rather 
than the identifier p1. 
p2: The meaning of this statistic depends on the wait event; see 
V$EVENT_NAME.PARAMETER2. On Oracle 10.1 and above, the actual meaning of the 
p2 parameter from V$EVENT_NAME.PARAMETER2 appears in the trace file, rather 
than the identifier p2. 
p3: The meaning of this statistic depends on the wait event; see 
V$EVENT_NAME.PARAMETER3. On Oracle 10.1 and above, the actual meaning of the 
p3 parameter from V$EVENT_NAME.PARAMETER3 appears in the trace file, rather 
than the identifier p3. 


STAT lines: The row source execution plan. 
1. id: Line identifier in the execution plan, used to identify child operations. 
2. cnt: Number of rows returned or processed. 
3. pid: Parent operation line identifier, used to determine indentation of the 
plan based on the indentation of the parent operation line identifier. 
4. obj: Object ID of the object referenced at the stage of the plan. When the 
object name does not appear on a STAT line (or on a WAIT line), query 
DBA_OBJECTS for a matching value in the OBJECT_ID column to locate the 
owner, object name, and object type (and in some cases the subobject 
name). 


Generating a Trace File on Error 
When an error message is returned to the client application, it is not always possible to determine the 
exact cause of the error message. Oracle’s ERRORSTACK level 3 trace dump and PROCESSSTATE trace dump 
output all open cursors for the session with bind variable values.

To enable this feature including the error 
stack (level 0), function call stack (level 1—the execution stack for the process), process state (level 2), 
and context area (level 3), execute the following in the session (note that 1722 refers to the ORA-01722 
error): 
SQL> ALTER SESSION SET EVENTS '1722 TRACE NAME ERRORSTACK LEVEL 3';



Initiating a Trace with SQL*Plus ORADEBUG
====================================






HANGANALYZE Dump 
HANGANALYZE dumps drill into the specific processes in the database instance that are blocked by another 
session (an enqueue-type wait, for instance), processes that are spinning because of a problem in the 
database instance (such as an internal deadlock on pins or latches), and other situations involving 
severe performance problems.


HANGANALYZE dumps use internal kernel calls to 
identify specific sessions of interest, identifying the waiting sessions and blocking sessions. See Metalink 
Doc ID 215858.1 “Interpreting HANGANALYZE Trace Files to Diagnose Hanging and Performance 
Problems” for additional detail about HANGANALYZE dumps. 


ORADEBUG HANGANALYZE 3 
Chains most likely to have caused the hang: 
 [a] Chain 1 Signature: 'SQL*Net message from client'<= 
 'enq: TX - row lock contention' 
 Chain 1 Signature Hash: 0x38c48850 
 [b] Chain 2 Signature: 'SQL*Net message from client'<= 
 'enq: TX - row lock contention' 
 Chain 2 Signature Hash: 0x38c48850 
 [c] Chain 3 Signature: <not in a wait> 
 Chain 3 Signature Hash: 0x673a0128 
 
 
 HEAPDUMP Dumps 
HEAPDUMP dumps provide a method to determine the contents of various memory regions in the 
database instance including the SGA, PGA, large pool, Java pool, and so forth.The level specified for 
the HEAPDUMP determines which memory region is dumped and whether recursion is used to find the 
five largest subheaps.



■ Note In the HEAPDUMP output, Chunk identifies the memory address, sz= lists the memory size in bytes, the next 
column lists the type of memory chunk, and the final column lists the reason for allocation. 



Java Pool Memory Allocation 
The Java pool memory holds the shared portion of each Java class used per session, and in a shared 
server configuration the Java pool also maintains the Java state per session (a portion of the UGA).

QL> ORADEBUG SETMYPID 
SQL> ORADEBUG UNLIMIT 
SQL> ALTER SESSION SET TRACEFILE_IDENTIFIER='JAVA_POOL'; 
SQL> ORADEBUG DUMP HEAPDUMP 128 
SQL> ORADEBUG CLOSE_TRACE 


Large Pool Memory Allocation 
The large pool memory is used by parallel execution (parallel query) for parallel execution message 
buffers, Recovery Manager for disk I/O buffers when I/O slaves are used, shared server allocation of the 
User Global Area (UGA), and Oracle XA (X/Open Distributed Transaction Processing Architecture).

SQL> ORADEBUG SETMYPID 
SQL> ORADEBUG UNLIMIT 
SQL> ALTER SESSION SET TRACEFILE_IDENTIFIER='LARGE_POOL'; 
SQL> ORADEBUG DUMP HEAPDUMP 32 
SQL> ORADEBUG CLOSE_TRACE 
HEAP DUMP heap name="large pool" desc=0000000006F12550 
 extent sz=0xfe0 alt=216 het=32767 rec=9 flg=-126 opc=0 
 parent=0000000000000000 owner=0000000000000000 nex=0000000000000000 xsz=0x41ae0 



PGA and UGA Memory Allocation 
PGA/UGA dumps are useful when troubleshooting ORA-4030 out of process memory when trying to 
allocate %s bytes errors that may be an indication of a PGA memory leak in a session causing the 
memory used by the process to continue increasing in size. Multiple HEAPDUMPs may be required when 
troubleshooting ORA-4030 errors. 

SQL> ORADEBUG SETMYPID 
SQL> ORADEBUG UNLIMIT 
SQL> ALTER SESSION SET TRACEFILE_IDENTIFIER='PGA_UGA'; 
SQL> ORADEBUG DUMP HEAPDUMP 5 
SQL> ORADEBUG CLOSE_TRACE 
HEAP DUMP heap name="session heap" desc=000000001F675968 
 extent sz=0xff80 alt=32767 het=32767 rec=0 flg=2 opc=3 
 parent=000000001ABB1C90 owner=000000026CACD920 nex=0000000000000000 xsz=0x1e278
 
 
 The following commands instruct ORADEBUG to connect to the process for the current session, 
remove the maximum trace file size limitation, specify a portion of the trace filename to help the DBA 
locate the trace file, write a description of the shared pool contents identifying the top five sub-subheaps 
to the trace file, and then close the trace file. A portion of the trace file follows: 
SQL> ORADEBUG SETMYPID 
SQL> ORADEBUG UNLIMIT 
SQL> ALTER SESSION SET TRACEFILE_IDENTIFIER='SGA_TOP_5'; 
SQL> ORADEBUG DUMP HEAPDUMP 536870914 
SQL> ORADEBUG CLOSE_TRACE 

SHORT_STACK Dump 
A SHORT_STACK dump shows the process stack for the attached process, output directly to the SQL*Plus 
screen. It may be necessary to execute the SHORT_STACK dump multiple times to determine the status of 
the process through the use of the process stack traces.

SQL> ORADEBUG SETORAPID 26 
Oracle pid: 26, Windows thread id: 836, image: ORACLE.EXE (SHAD) 
SQL> ORADEBUG SHORT_STACK

SYSTEMSTATE dumps captured at level 2 
are helpful when used in conjunction with a level 3 HANGANALYZE dump. To also include a short stack 
output in the trace file, set event 10998 or add 256 to the SYSTEMSTATE dump level.



Examining Client-Side Traces 
Client-side trace options are available from a variety of sources including Oracle’s SQL*Net (see 
Metalink Doc IDs 779226.1, 219968.1, and 395525.1); Windows client tracing (see Metalink Doc ID 
216912.1) using ODBC, Oracle Provider for OLE DB, Oracle Objects for OLE (OO4O), Oracle Data 
Provider for .NET (ODP.NET), and Oracle Service for Microsoft Transaction Server (ORAMTS); clientside file- and registry-monitoring utilities on the Windows platform including Process Monitor.


SQL*Net Tracing 
Several parameters in the sqlnet.ora file control whether logging is enabled for the client, server, or 
listener, as well as the level of detail and location of the log files. The following are entries in a sqlnet.ora
file on a Windows client, enabling a level 16 (SUPPORT level) log, with the resulting log files written to the 
C:\TRACEFILES directory: 
TRACE_LEVEL_CLIENT = 16 
TRACE_DIRECTORY_CLIENT=C:\TRACEFILES 
TRACE_UNIQUE_CLIENT = ON 
TRACE_TIMESTAMP_CLIENT = ON



Process Monitor Tracing 
Process Monitor, available as a free download from Microsoft’s website, time-synchronizes Windows 
Registry accesses with local and remote file accesses, allowing generated log files to be manually time 
sequenced with SQL*Net traces, network packet traces, and 10046 extended SQL traces.


Investigating Enqueue Waits 
When investigating enqueue-type waits (enqueue – in releases prior to Oracle 10.1, enq: TM – 
contention, enq: TX - row lock contention, enq: HW – contention,



The following SQL statement retrieves either the current and/or the most recent wait events for the 
sessions. Because of space limitations, the USERNAME, PROGRAM, SQL_ID, SQL_ADDRESS, SQL_HASH_VALUE, and 
SQL_CHILD_NUMBER columns are not displayed. The omitted columns have limited value for this test case, 
but will prove to be helpful when attempting to troubleshoot problems in a production environment. 
SQL> SELECT /*+ ORDERED */ 
 2 S.SID, S.USERNAME, S.PROGRAM, S.STATUS, SW.EVENT, SW.WAIT_TIME WT, SW.STATE, 
 3 SW.SECONDS_IN_WAIT S_I_W, S.SQL_ID, S.SQL_ADDRESS, S.SQL_HASH_VALUE, 
 4 S.SQL_CHILD_NUMBER, S.ROW_WAIT_OBJ# OBJ#, S.ROW_WAIT_FILE# FILE#, 
 5 S.ROW_WAIT_BLOCK# BLOCK#, S.ROW_WAIT_ROW# ROW#, SW.P1, SW.P2, SW.P3 
 6 FROM 
 7 V$SESSION_WAIT SW, V$SESSION S 
 8 WHERE 
 9 S.USERNAME IS NOT NULL 
 10 AND SW.SID=S.SID 
 11 AND SW.EVENT NOT LIKE '%SQL*Net%' 
 12 AND SW.EVENT NOT IN ('Streams AQ: waiting for messages in the queue', 
 13 'wait for unread message on broadcast channel'); 
SID EVENT WT STATE S_I_W OBJ# FILE# BLOCK# ROW# P1 P2 P3 
--- -------------------- -- ------- ----- ---- ----- ------ ---- ---------- ----- -- 
154 enq: TM - contention 0 WAITING 51 -1 0 0 0 1414332421 67165 0 
155 enq: TM - contention 0 WAITING 33 -1 0 0 0 1414332419 67165 0




Enqueue locks occur in various modes ranging from 1 to 6: 
x Mode 1 is known as a NULL lock, indicating that no session holds the resource 
(SELECT statement). 
x Mode 2 is a row shared S(SS) lock indicating read access to a compound resource 
(SELECT FOR UPDATE, LOCK ROW SHARE). 
x Mode 3 is a row exclusive X(SX) lock indicating write access to a compound 
resource (INSERT, UPDATE, DELETE, LOCK ROW EXCLUSIVE). 
x Mode 4 is a share (S) lock indicating that one or more sessions are reading (LOCK 
SHARE, CREATE INDEX). 
x Mode 5 is a share row exclusive X(SSX) lock that is a combination of read access 
for one part of a compound resource and write access to another part of a 
compound resource (LOCK SHARE ROW EXCLUSIVE). 
x Mode 6 is an exclusive (X) lock indicating that the session is writing (INSERT, UPDATE 
TABLE, LOCK EXCLUSIVE, ALTER TABLE, DROP TABLE, DROP INDEX, TRUNCATE TABLE). 


he lock types, and the last SQL statement executed by the sessions: 
SQL> SELECT 
 2 S.SID, S.USERNAME, S.PROGRAM, S.SQL_ID, S.SQL_ADDRESS, S.SQL_HASH_VALUE, 
 3 S.SQL_CHILD_NUMBER CN, S.ROW_WAIT_OBJ#, S.ROW_WAIT_FILE#, S.ROW_WAIT_BLOCK#, 
 4 S.ROW_WAIT_ROW#, L.LMODE, L.REQUEST, L.ID1, L.ID2, L.TYPE, L.BLOCK 
 5 FROM 
 6 V$LOCK L, 
 7 V$SESSION S 
 8 WHERE 
 9 (L.ID1, L.ID2, L.TYPE) IN 
 10 (SELECT 
 11 ID1, ID2, TYPE 
 12 FROM 
 13 V$LOCK 
 14 WHERE 
 15 REQUEST > 0) 
 16 AND L.SID=S.SID; 

 




